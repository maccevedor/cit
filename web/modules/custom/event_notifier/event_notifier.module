<?php

/**
 * @file
 * Primary module hooks for Event Notifier module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_node_insert().
 */
function event_notifier_node_insert(\Drupal\node\NodeInterface $node) {
  // Only process Event content type.
  if ($node->bundle() === 'event') {
    // Send notification if the node is published.
    if ($node->isPublished()) {
      _event_notifier_send_notification($node, 'created');
    }
  }
}

/**
 * Implements hook_node_update().
 */
function event_notifier_node_update(\Drupal\node\NodeInterface $node) {
  // Only process Event content type.
  if ($node->bundle() === 'event') {
    // Check if the node was just published.
    if ($node->isPublished() && $node->original && !$node->original->isPublished()) {
      _event_notifier_send_notification($node, 'published');
    }
  }
}

/**
 * Sends email notification for event updates.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The event node.
 * @param string $action
 *   The action that triggered the notification (created, published).
 */
function _event_notifier_send_notification(\Drupal\node\NodeInterface $node, $action) {
  // Get configuration.
  $config = \Drupal::config('event_notifier.settings');
  $recipient_email = $config->get('notification_email') ?: 'admin@example.com';

  // Prepare email parameters.
  $params = [
    'node' => $node,
    'action' => $action,
    'subject' => t('Event @action: @title', [
      '@action' => $action === 'created' ? 'Created' : 'Published',
      '@title' => $node->getTitle(),
    ]),
  ];

  // Send email using Drupal's mail system.
  $mail_manager = \Drupal::service('plugin.manager.mail');
  $result = $mail_manager->mail(
    'event_notifier',
    'event_notification',
    $recipient_email,
    \Drupal::languageManager()->getDefaultLanguage()->getId(),
    $params
  );

  // Log the notification.
  if ($result['result']) {
    \Drupal::logger('event_notifier')->info('Event notification sent for @title (@action)', [
      '@title' => $node->getTitle(),
      '@action' => $action,
    ]);
  }
  else {
    \Drupal::logger('event_notifier')->error('Failed to send event notification for @title', [
      '@title' => $node->getTitle(),
    ]);
  }
}

/**
 * Implements hook_mail().
 */
function event_notifier_mail($key, &$message, $params) {
  switch ($key) {
    case 'event_notification':
      $message['subject'] = $params['subject'];
      $message['body'][] = _event_notifier_build_email_body($params);
      break;
  }
}

/**
 * Builds the email body content.
 *
 * @param array $params
 *   Email parameters.
 *
 * @return string
 *   The email body.
 */
function _event_notifier_build_email_body($params) {
  $node = $params['node'];
  $action = $params['action'];

  $body = t('An event has been @action on the website.', ['@action' => $action]) . "\n\n";
  $body .= t('Event Details:') . "\n";
  $body .= t('Title: @title', ['@title' => $node->getTitle()]) . "\n";

  // Add event date if available.
  if ($node->hasField('field_event_date') && !$node->get('field_event_date')->isEmpty()) {
    $date = $node->get('field_event_date')->first()->getValue();
    $body .= t('Date: @date', ['@date' => $date['value']]) . "\n";
  }

  // Add location if available.
  if ($node->hasField('field_location') && !$node->get('field_location')->isEmpty()) {
    $location = $node->get('field_location')->value;
    $body .= t('Location: @location', ['@location' => $location]) . "\n";
  }

  $body .= "\n" . t('View the event: @url', [
    '@url' => $node->toUrl('canonical', ['absolute' => TRUE])->toString(),
  ]);

  return $body;
}
